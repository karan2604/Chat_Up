/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Main;

import com.sun.javafx.tk.Toolkit;
import function.FileChooser;
import function.Method;
import java.awt.Adjustable;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.RenderingHints;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileFilter;
import message.Message;
import my_swing.Friend_Box;
import my_swing.Get_Box;
import my_swing.Get_Box_New;
import my_swing.Get_File;
import my_swing.Get_File_New;
import my_swing.Get_Photo_Box;
import my_swing.Get_Photo_Box_New;
import my_swing.Get_Sound;
import my_swing.Get_Sound_New;
import my_swing.Send_Box;
import my_swing.Send_Box_New;
import my_swing.Send_File;
import my_swing.Send_File_New;
import my_swing.Send_Photo_Box;
import my_swing.Send_Photo_Box_New;
import my_swing.Send_Sound;
import my_swing.Send_Sound_New;
import static sun.management.snmp.jvminstr.JvmThreadInstanceEntryImpl.ThreadStateMap.Byte0.runnable;

/**
 *
 * @author asus
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public static String lbusername="Hello Buddy";
    
    public Main() {
        initComponents();
        labelusername.setText(lbusername);
        open();
    }
    
    private void open()
    {
        popupmore.add(layeredpaneforpopup);
        popuprecorder.add(layeredpaneforpopuprecorder);
        
        savechatmsg();
       
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layeredpaneforpopup = new javax.swing.JLayeredPane(){ @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g;
                g2.setColor(getBackground());
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
            }};
            photosend = new javax.swing.JButton();
            filesend = new javax.swing.JButton();
            recordersend = new javax.swing.JButton();
            popupmore = new javax.swing.JPopupMenu();
            layeredpaneforpopuprecorder = new javax.swing.JLayeredPane();
            recorder = new javax.swing.JButton();
            popuprecorder = new javax.swing.JPopupMenu();
            panel_bg = new javax.swing.JPanel();
            spfriend = new javax.swing.JScrollPane();
            panelfriend = new javax.swing.JPanel();
            logout = new javax.swing.JButton();
            txt = new javax.swing.JTextField();
            send = new javax.swing.JButton();
            realchatlabel = new javax.swing.JLabel();
            friendlistlabel1 = new javax.swing.JLabel();
            labelusername = new javax.swing.JLabel();
            more = new javax.swing.JButton();
            spchat = new javax.swing.JScrollPane();
            panelchat = new javax.swing.JDesktopPane(){
                @Override
                protected void paintComponent(Graphics g) {
                    super.paintComponent(g);
                    g.setColor(Color.WHITE);
                    g.fillRect(0, 0, getWidth(), getHeight());
                }
            };
            jLabel1 = new javax.swing.JLabel();

            layeredpaneforpopup.setBackground(java.awt.Color.white);
            layeredpaneforpopup.setBackground(java.awt.Color.white);
            layeredpaneforpopup.setForeground(new java.awt.Color(255, 255, 255));

            photosend.setBackground(new java.awt.Color(255, 255, 255));
            photosend.setForeground(new java.awt.Color(255, 255, 255));
            photosend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/photo.png"))); // NOI18N
            photosend.setBorder(null);
            photosend.setContentAreaFilled(false);
            photosend.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/photo_click.png"))); // NOI18N
            photosend.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    photosendActionPerformed(evt);
                }
            });

            filesend.setBackground(new java.awt.Color(255, 255, 255));
            filesend.setForeground(new java.awt.Color(255, 255, 255));
            filesend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/file.png"))); // NOI18N
            filesend.setBorder(null);
            filesend.setContentAreaFilled(false);
            filesend.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/file_click.png"))); // NOI18N
            filesend.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    filesendActionPerformed(evt);
                }
            });

            recordersend.setBackground(new java.awt.Color(255, 255, 255));
            recordersend.setForeground(new java.awt.Color(255, 255, 255));
            recordersend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/microphone.png"))); // NOI18N
            recordersend.setBorder(null);
            recordersend.setContentAreaFilled(false);
            recordersend.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/microphone_click.png"))); // NOI18N
            recordersend.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    recordersendActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layeredpaneforpopupLayout = new javax.swing.GroupLayout(layeredpaneforpopup);
            layeredpaneforpopup.setLayout(layeredpaneforpopupLayout);
            layeredpaneforpopupLayout.setHorizontalGroup(
                layeredpaneforpopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(photosend, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addComponent(filesend, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addComponent(recordersend, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
            );
            layeredpaneforpopupLayout.setVerticalGroup(
                layeredpaneforpopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layeredpaneforpopupLayout.createSequentialGroup()
                    .addComponent(photosend, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(filesend, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(recordersend, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
            );
            layeredpaneforpopup.setLayer(photosend, javax.swing.JLayeredPane.DEFAULT_LAYER);
            layeredpaneforpopup.setLayer(filesend, javax.swing.JLayeredPane.DEFAULT_LAYER);
            layeredpaneforpopup.setLayer(recordersend, javax.swing.JLayeredPane.DEFAULT_LAYER);

            popupmore.setBackground(new java.awt.Color(255, 255, 255));
            popupmore.setForeground(new java.awt.Color(255, 255, 255));
            popupmore.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

            recorder.setBackground(new java.awt.Color(0, 153, 0));
            recorder.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            recorder.setForeground(new java.awt.Color(255, 255, 255));
            recorder.setText("Start");
            recorder.setContentAreaFilled(false);
            recorder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            recorder.setMaximumSize(new java.awt.Dimension(71, 40));
            recorder.setMinimumSize(new java.awt.Dimension(71, 40));
            recorder.setOpaque(true);
            recorder.setPreferredSize(new java.awt.Dimension(71, 40));
            recorder.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    recorderMousePressed(evt);
                }
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    recorderMouseReleased(evt);
                }
            });

            javax.swing.GroupLayout layeredpaneforpopuprecorderLayout = new javax.swing.GroupLayout(layeredpaneforpopuprecorder);
            layeredpaneforpopuprecorder.setLayout(layeredpaneforpopuprecorderLayout);
            layeredpaneforpopuprecorderLayout.setHorizontalGroup(
                layeredpaneforpopuprecorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(recorder, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
            );
            layeredpaneforpopuprecorderLayout.setVerticalGroup(
                layeredpaneforpopuprecorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(recorder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );
            layeredpaneforpopuprecorder.setLayer(recorder, javax.swing.JLayeredPane.DEFAULT_LAYER);

            popuprecorder.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("Chat_Up");
            setBackground(new java.awt.Color(255, 255, 255));
            setResizable(false);
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowOpened(java.awt.event.WindowEvent evt) {
                    formWindowOpened(evt);
                }
            });

            panel_bg.setBackground(new java.awt.Color(255, 255, 255));

            spfriend.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

            panelfriend.setBackground(new java.awt.Color(255, 255, 255));
            panelfriend.setLayout(new javax.swing.BoxLayout(panelfriend, javax.swing.BoxLayout.Y_AXIS));
            spfriend.setViewportView(panelfriend);

            logout.setBackground(new java.awt.Color(255, 51, 51));
            logout.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
            logout.setForeground(new java.awt.Color(255, 255, 255));
            logout.setText("SignOut");
            logout.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
            logout.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    logoutActionPerformed(evt);
                }
            });

            txt.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
            txt.setToolTipText("Enter Your Message Here");
            txt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
            txt.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    txtKeyTyped(evt);
                }
            });

            send.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/send.png"))); // NOI18N
            send.setContentAreaFilled(false);
            send.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/send_click.png"))); // NOI18N
            send.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sendActionPerformed(evt);
                }
            });

            realchatlabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
            realchatlabel.setForeground(new java.awt.Color(0, 0, 0));
            realchatlabel.setText("Real Chat");
            realchatlabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

            friendlistlabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
            friendlistlabel1.setForeground(new java.awt.Color(0, 0, 0));
            friendlistlabel1.setText("Friend List");
            friendlistlabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

            labelusername.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
            labelusername.setForeground(new java.awt.Color(255, 51, 51));
            labelusername.setText("Hello Buddy");

            more.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/more.png"))); // NOI18N
            more.setContentAreaFilled(false);
            more.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/more_click.png"))); // NOI18N
            more.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    moreActionPerformed(evt);
                }
            });

            spchat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
            spchat.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

            panelchat.setBackground(new java.awt.Color(255, 255, 255));
            panelchat.setLayout(new javax.swing.BoxLayout(panelchat, javax.swing.BoxLayout.Y_AXIS));
            spchat.setViewportView(panelchat);

            ImageIcon i1=new ImageIcon(ClassLoader.getSystemResource("icon/chat_image.jpg"));
            Image i2=i1.getImage().getScaledInstance(1000,150,Image.SCALE_DEFAULT);
            ImageIcon i3=new ImageIcon(i2);
            jLabel1.setIcon(i3);

            javax.swing.GroupLayout panel_bgLayout = new javax.swing.GroupLayout(panel_bg);
            panel_bg.setLayout(panel_bgLayout);
            panel_bgLayout.setHorizontalGroup(
                panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panel_bgLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panel_bgLayout.createSequentialGroup()
                            .addGroup(panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(labelusername, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                                .addComponent(friendlistlabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(logout, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spfriend, javax.swing.GroupLayout.Alignment.LEADING))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(realchatlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(spchat, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(panel_bgLayout.createSequentialGroup()
                                    .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(more, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 44, Short.MAX_VALUE)))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            panel_bgLayout.setVerticalGroup(
                panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_bgLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panel_bgLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(realchatlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panel_bgLayout.createSequentialGroup()
                            .addComponent(labelusername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(friendlistlabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(spchat, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                        .addComponent(spfriend))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panel_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(more, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(send, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panel_bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
            );

            pack();
            setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

    private Thread th;
    private int Currentid=0;
    
    private void start()
    {
        th=new Thread(new Runnable() {

            @Override
            public void run() {
             try{
                    while(true)
                    {
                        System.out.println("Waiting for Message");
                        
                        Message ms=(Message)Method.getIn().readObject();
                        String status=ms.getStatus();
                        
                        
                        if(status.equals("New"))
                        {
                            newFriend(ms.getImage(), ms.getID(), ms.getName().split("!")[0], ms.getName().split("!")[1]);
                        }
                        else if(status.equals("Error"))
                        {
                            errorfriend(ms.getID());
                        }
                        else if(status.equals("Message"))
                        {
                            getmessage(ms.getID(),ms.getMessage());
                        }
                        else if (status.equals("Photo")) 
                        {
                            getPhoto(ms.getID(), ms.getImage());
                        } 
                        else if(status.equals("Sound"))
                        {
                            getSound(ms.getID(),ms.getData(),ms.getMessage());
                        }
                        else if(status.equals("File"))
                        {
                            getFile(ms.getID(), ms.getName(), ms.getImage());
                        }
                        else if (status.equals("GetFile")) 
                        {
                            download(ms);
                        }
                        
                    }
                }
                catch(Exception e)
                {
                    System.out.println("Client Error");
                    String ms = e.getMessage();
                    if (ms.equals("Socket closed")) {
                       signOut("Sign out");
                    } else if (ms.equals("Connection reset")) {
                        signOut("Server has error");
                    } else {
                         signOut("Error : " + ms);
                    }
                }
            }
        });
        th.start();
    }
    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
       start();
    }//GEN-LAST:event_formWindowOpened

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        // TODO add your handling code here:
        if(!txt.getText().trim().equals(""))
        {
            try {
                Method.sendmessage(txt.getText().trim());
            } catch (Exception ex) {
                System.out.println(ex);
            }
            txt.setText("");
            txt.grabFocus();
        }
    }//GEN-LAST:event_sendActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        
        int c = JOptionPane.showConfirmDialog(this, "Are you sure you want to sign out ?", "Sign out", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(c==JOptionPane.YES_OPTION)
        {
            try{
                Method.getSocket().close();
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_logoutActionPerformed

    private void txtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKeyTyped
        // TODO add your handling code here:
         if (evt.getKeyChar() == 10) {
           sendActionPerformed(null);
        }
    }//GEN-LAST:event_txtKeyTyped

    private void moreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreActionPerformed
        // TODO add your handling code here:
        popupmore.show(more,0,-164);
        
    }//GEN-LAST:event_moreActionPerformed

    private void recordersendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordersendActionPerformed
        // TODO add your handling code here:
        popuprecorder.show(txt,70,-90);
    }//GEN-LAST:event_recordersendActionPerformed

    private void filesendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filesendActionPerformed
        // TODO add your handling code here:
        try {
            popuprecorder.setVisible(false);
            setfile();
        } catch (Exception e) {
            //showStatus("Error : " + e.getMessage());
        }
    }//GEN-LAST:event_filesendActionPerformed

    private void photosendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photosendActionPerformed
        // TODO add your handling code here:
        popupmore.setVisible(false);
        setImage();
    }//GEN-LAST:event_photosendActionPerformed

    private void recorderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recorderMousePressed
        // TODO add your handling code here:
        recorder.setText("Starting");
        Method.getRecorder().captureAudio();
    }//GEN-LAST:event_recorderMousePressed

    private void recorderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recorderMouseReleased
        try {
            // TODO add your handling code here:
            recorder.setText("Start");
            Method.sendsound(Method.getRecorder().stop(),Method.getRecorder().getTime());
            popuprecorder.setVisible(false);
        }catch(Exception ex)
        {
            System.out.println(ex);
            //showStatus("Error : " + e.getMessage());
        }
    }//GEN-LAST:event_recorderMouseReleased

    private void setImage()
    {
        JFileChooser ch=new JFileChooser();
        FileChooser preview=new FileChooser();
        ch.setAccessory(preview);
        ch.addPropertyChangeListener(preview);
        ch.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                String name = f.getName();
                return f.isDirectory() || name.endsWith(".png") || name.endsWith(".PNG") || name.endsWith("jpg") || name.endsWith("JPG");
            }

            @Override
            public String getDescription() {
                 return "png,jpg";
            }
        });
        int c=ch.showOpenDialog(this);
        if(c==JFileChooser.APPROVE_OPTION)
        {
            ImageIcon image = new ImageIcon(ch.getSelectedFile().getAbsolutePath());
            try {
                Method.sendphoto(image);
            } catch (Exception e) {
                //showStatus("Error : Can't send photo");
            }
        }
    }
    private void getPhoto(int ID, ImageIcon image) 
    {
        if(ID==Method.getMyID())
        {
            if(ID==Currentid)
            {
                Send_Photo_Box box = new Send_Photo_Box();
                box.setPhoto(image);
                panelchat.add(box);
            }
            else
            {
                Send_Photo_Box_New box = new Send_Photo_Box_New();
                box.setPhoto(ID, image);
                panelchat.add(box);
            }
        }
        else
        {
            if(ID==Currentid)
            {
                Get_Photo_Box box = new Get_Photo_Box();
                box.setPhoto(image);
                panelchat.add(box);
            }
            else
            {
                Get_Photo_Box_New box = new Get_Photo_Box_New();
                box.setPhoto(ID, image);
                panelchat.add(box);
            }
        }
        Currentid=ID;
        refresh(panelchat);
        scrolltobottom(spchat);
        
    }
    
    private void newFriend(ImageIcon icon,int ID,String name,String time)
    {
        Friend_Box friend=new Friend_Box();
        friend.set(icon,ID,name,time);
        Method.getFriends().put(ID, friend);
        if(Method.getMyname().equalsIgnoreCase(name))
        {
            Method.setMyID(ID);
        }
        
        panelfriend.add(friend);
        
        refresh(panelfriend);
        
    }
    
    private void refresh(Component obj)
    {
        obj.revalidate();
        obj.repaint();
    }
    
    private void errorfriend(int ID)
    {
        panelfriend.remove((Component) Method.getFriends().get(ID));
        Method.getFriends().remove(ID);
        refresh(panelfriend);
    }
    
    private void getmessage(int ID,String msg)
    {
        
        if(ID==Method.getMyID())
        {
            if(ID==Currentid)
            {
                Send_Box box=new Send_Box();
                box.setMessage(msg);
                panelchat.add(box);
                msgsaved(ID,msg,"Send_Box");
            }
            else
            {
                Send_Box_New box=new Send_Box_New();
                box.setMessage(ID, msg);
                panelchat.add(box);
                msgsaved(ID,msg,"Send_Box_New");
            }
        }
        else
        {
            if(ID==Currentid)
            {
                Get_Box box=new Get_Box();
                box.setMessage(msg);
                panelchat.add(box);
                msgsaved(ID,msg,"Get_Box");
            }
            else
            {
                Get_Box_New box=new Get_Box_New();
                box.setMessage(ID, msg);
                panelchat.add(box);
                msgsaved(ID,msg,"Get_Box_New");
            }
        }
                
        Currentid=ID;
        refresh(panelchat);
        scrolltobottom(spchat);
        
    }
    
    private void scrolltobottom(JScrollPane scrollPane)
    {
        System.out.println("hey");
        JScrollBar verticalBar = scrollPane.getVerticalScrollBar();
        AdjustmentListener downScroller=new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                Adjustable adjustable = e.getAdjustable();
                adjustable.setValue(adjustable.getMaximum());
                verticalBar.removeAdjustmentListener(this);
           }
        };
        verticalBar.addAdjustmentListener(downScroller);
    }
    
     private void signOut(String ms) {
        try {
            this.dispose();
            String[] v = {ms};
            Login.main(v);
        } catch (Exception e) {
        }
    }
     
     private void getSound(int ID, byte[] sound, String time)
     {
         if (ID == Method.getMyID()) {
            if (ID == Currentid) {
                Send_Sound box = new Send_Sound();
                box.set(sound, time);
                panelchat.add(box);
            } else {
                Send_Sound_New box = new Send_Sound_New();
                box.set(ID, sound, time);
                panelchat.add(box);
            }
        } else {
            if (ID == Currentid) {
                Get_Sound box = new Get_Sound();
                box.set(sound, time);
                panelchat.add(box);
            } else {
                Get_Sound_New box = new Get_Sound_New();
                box.set(ID, sound, time);
                panelchat.add(box);
            }
        }
        Currentid = ID;
        refresh(panelchat);
        scrolltobottom(spchat);
     }
     
     private void setfile() throws IOException
     {
         JFileChooser ch=new JFileChooser();
         FileChooser preview=new FileChooser();
         ch.setAccessory(preview);
         ch.addPropertyChangeListener(preview);
         int c=ch.showOpenDialog(this);
         if(c==JFileChooser.APPROVE_OPTION)
         {
              Method.sendfile(ch.getSelectedFile());
         }
     }
     
     private void getFile(int ID, String ms, ImageIcon icon) 
     {
         if (ID == Method.getMyID()) {
            if (ID == Currentid) {
                Send_File box = new Send_File();
                box.set(ms, icon);
                panelchat.add(box);
            } else {
                Send_File_New box = new Send_File_New();
                box.set(ID, ms, icon);
                panelchat.add(box);
            }
        } else {
            if (ID ==Currentid) {
                Get_File box = new Get_File();
                box.set(ms, icon);
                panelchat.add(box);
            } else {
                Get_File_New box = new Get_File_New();
                box.set(ID, ms, icon);
                panelchat.add(box);
            }
        
        }
        Currentid = ID;
        refresh(panelchat);
        scrolltobottom(spchat);
     }
     
     private void download(Message ms)
     {
         try {
            File file = new File(ms.getName());
            FileOutputStream out = new FileOutputStream(file);
            out.write(ms.getData());
            out.close();
        } catch (Exception e) {
            //showStatus("Error : can't download");
        }
     }
   
     private void msgsaved(int ID,String msg,String box_ID)
     {
         //System.out.println(box_ID);
         Thread th=new Thread(new Runnable() {

             @Override
             public void run() {
                 Calendar calendar=Calendar.getInstance();
                 Date date=calendar.getTime();
                 String time=new SimpleDateFormat("DD-MM-YYYY hh:mm a").format(date);
                 String mg=box_ID+"!"+Method.getFriends().get(ID).getfName()+"!"+msg+"!"+time+"#";
                 Database.update_msg(mg,time,Login.getUname());
             }
         });
         th.start();
     }
     
     private void savechatmsg()
     {
         new Thread(new Runnable() {

             @Override
             public void run() {
                 Database.get_msg_from_savechat(Login.getUname());
         String msg=Database.getChatmsg();
         if(!msg.trim().isEmpty())
         {
            //String time=Database.getChattime();
            //System.out.println(msg);
            //System.out.println(time);
            String arr[]=msg.split("#");
            for(String s:arr)
             {
                String id=s.split("!")[0];
                String uname=s.split("!")[1];
                String m=s.split("!")[2];
                String time=s.split("!")[3];
                //System.out.println(s);
                //System.out.println(id);
                //System.out.println(uname);
                //System.out.println(m);
                if(id.equals("Send_Box"))
                {
                    Send_Box box=new Send_Box();
                    box.setMessage(m);
                    panelchat.add(box);
                    
                }
                else if(id.equals("Send_Box_New"))
                {
                    Send_Box_New box=new Send_Box_New();
                    box.setsavedchatmsg(time+"     "+"You", m);
                    //box.setMessage(ID, msg);
                    panelchat.add(box);
                   
                }
                else if(id.equals("Get_Box"))
                {
                    Get_Box box=new Get_Box();
                    box.setMessage(m);
                    panelchat.add(box);
                }
                else if(id.equals("Get_Box_New"))
                {
                    Get_Box_New box=new Get_Box_New();
                    box.setsavedchatmsg(uname+"     "+time,m);
                    //box.setMessage(ID, msg);
                    panelchat.add(box);
                }
                    
                refresh(panelchat);
                scrolltobottom(spchat);
                    
            }
         }
             }
         }).start();
         
     }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton filesend;
    private javax.swing.JLabel friendlistlabel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelusername;
    private javax.swing.JLayeredPane layeredpaneforpopup;
    private javax.swing.JLayeredPane layeredpaneforpopuprecorder;
    private javax.swing.JButton logout;
    private javax.swing.JButton more;
    private javax.swing.JPanel panel_bg;
    private javax.swing.JDesktopPane panelchat;
    private javax.swing.JPanel panelfriend;
    private javax.swing.JButton photosend;
    private javax.swing.JPopupMenu popupmore;
    private javax.swing.JPopupMenu popuprecorder;
    private javax.swing.JLabel realchatlabel;
    private javax.swing.JButton recorder;
    private javax.swing.JButton recordersend;
    private javax.swing.JButton send;
    private javax.swing.JScrollPane spchat;
    private javax.swing.JScrollPane spfriend;
    private javax.swing.JTextField txt;
    // End of variables declaration//GEN-END:variables
}
